<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>MecSim - Traffic Simulation: CCommon.java Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.js", "TeX/AMSsymbols.js", "TeX/MathTools.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../layout.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">MecSim - Traffic Simulation
   </div>
   <div id="projectbrief">micro traffic simulation with layered world structure</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../namespaces.htm"><span>Packages</span></a></li>
      <li><a href="../../annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d6/de1/a00233_source.htm','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">object/mas/jason/CCommon.java</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d6/de1/a00233.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * @cond LICENSE</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * ######################################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * # GPL License                                                                        #</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * #                                                                                    #</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * # This file is part of the micro agent-based traffic simulation MecSim of            #</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * # Clausthal University of Technology - Mobile and Enterprise Computing               #</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * # Copyright (c) 2014-15, Philipp Kraus (philipp.kraus@tu-clausthal.de)               #</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * # This program is free software: you can redistribute it and/or modify               #</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * # it under the terms of the GNU General Public License as                            #</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * # published by the Free Software Foundation, either version 3 of the                 #</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * # License, or (at your option) any later version.                                    #</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * #                                                                                    #</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * # This program is distributed in the hope that it will be useful,                    #</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * # but WITHOUT ANY WARRANTY; without even the implied warranty of                     #</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      #</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * # GNU General Public License for more details.                                       #</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * #                                                                                    #</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * # You should have received a copy of the GNU General Public License                  #</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * # along with this program. If not, see http://www.gnu.org/licenses/                  #</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * ######################################################################################</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * @endcond</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">package </span>de.tu_clausthal.in.mec.object.mas.jason;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">import</span> com.graphhopper.util.EdgeIteratorState;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">import</span> <a class="code" href="../../d0/d89/a00071.htm">de.tu_clausthal.in.mec.CLogger</a>;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">import</span> de.tu_clausthal.in.mec.object.mas.generic.ILiteral;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">import</span> <a class="code" href="../../d9/dd0/a00191.htm">de.tu_clausthal.in.mec.object.mas.generic.ITerm</a>;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">import</span> <a class="code" href="../../d9/dec/a00090.htm">de.tu_clausthal.in.mec.object.mas.generic.implementation.CNumberAtom</a>;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">import</span> <a class="code" href="../../d5/d1e/a00103.htm">de.tu_clausthal.in.mec.object.mas.generic.implementation.CStringAtom</a>;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">import</span> <a class="code" href="../../dd/d42/a00109.htm">de.tu_clausthal.in.mec.object.mas.generic.implementation.CTermList</a>;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">import</span> <a class="code" href="../../da/d24/a00068.htm">de.tu_clausthal.in.mec.object.mas.jason.belief.CLiteral</a>;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">import</span> jason.NoValueException;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">import</span> jason.asSyntax.ASSyntax;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">import</span> jason.asSyntax.Atom;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">import</span> jason.asSyntax.ListTerm;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">import</span> jason.asSyntax.Literal;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">import</span> jason.asSyntax.NumberTerm;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">import</span> jason.asSyntax.StringTerm;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">import</span> jason.asSyntax.Term;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">import</span> org.apache.commons.lang3.tuple.Pair;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">import</span> org.apache.commons.lang3.tuple.Triple;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">import</span> org.jxmapviewer.viewer.GeoPosition;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">import</span> java.util.Collection;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">import</span> java.util.HashSet;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">import</span> java.util.LinkedList;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">import</span> java.util.List;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">import</span> java.util.Map;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">import</span> java.util.Set;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> * common method for Jason</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm">   60</a></span>&#160;<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class </span><a class="code" href="../../d1/dc6/a00037.htm">CCommon</a></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">     * default source annotation &quot;source(self)&quot;</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#aa2752d3655a6f239889ad7a4e52ef3df">   65</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Literal <a class="code" href="../../d8/d41/a00038.htm#aa2752d3655a6f239889ad7a4e52ef3df">DEFAULTANNOTATION</a> = de.tu_clausthal.in.mec.object.mas.jason.CCommon.getLiteral( <span class="stringliteral">&quot;source&quot;</span>, <span class="stringliteral">&quot;self&quot;</span> );</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     * private ctor - avoid instantiation</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#ae2bc7c0c408fb6253271b26c76034d38">   71</a></span>&#160;    <span class="keyword">private</span> <a class="code" href="../../d8/d41/a00038.htm#ae2bc7c0c408fb6253271b26c76034d38">CCommon</a>()</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     * Jason creates quoted string, so we need to clean the string to create corrected Java strings</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">     * @param p_input input Jason string</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">     * @return cleanup Java String</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#a344161224ff36771399a98389761469f">   81</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">static</span> String <a class="code" href="../../d8/d41/a00038.htm#a344161224ff36771399a98389761469f">clearString</a>( <span class="keyword">final</span> String p_input )</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> p_input.replaceAll( <span class="stringliteral">&quot;\&quot;&quot;</span>, <span class="stringliteral">&quot;&quot;</span> ).replaceAll( <span class="stringliteral">&quot;&#39;&quot;</span>, <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">     * converts an atom into a string atom</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     * @param p_atom atom to convert</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">     * @return string atom</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#a8d2b8fac3c0497ef857ec75bb1978e22">   92</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">static</span> <a class="code" href="../../d5/d1e/a00103.htm">CStringAtom</a> <a class="code" href="../../d8/d41/a00038.htm#a8d2b8fac3c0497ef857ec75bb1978e22">convertGeneric</a>( <span class="keyword">final</span> Atom p_atom )</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="../../d5/d1e/a00103.htm">CStringAtom</a>( <a class="code" href="../../d8/d41/a00038.htm#a344161224ff36771399a98389761469f">clearString</a>( p_atom.getFunctor() ) );</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">     * converts a StringTerm into a string atom</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">     * @param p_term string term to convert</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">     * @return string atom</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#a02b5e34a57a3a59774c4e9db64ee4677">  103</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">static</span> <a class="code" href="../../d5/d1e/a00103.htm">CStringAtom</a> <a class="code" href="../../d8/d41/a00038.htm#a02b5e34a57a3a59774c4e9db64ee4677">convertGeneric</a>( <span class="keyword">final</span> StringTerm p_term )</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="../../d5/d1e/a00103.htm">CStringAtom</a>( <a class="code" href="../../d8/d41/a00038.htm#a344161224ff36771399a98389761469f">clearString</a>( p_term.getString() ) );</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">     * converts a jason specific set of literals to a generic one</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     * @param p_literals set of jason-specific literals</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">     * @return converted Set of generic literals</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#a7389d7596b9dcb20781cb0ba661d88cd">  114</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;ILiteral&lt;Literal&gt;&gt; <a class="code" href="../../d8/d41/a00038.htm#a7389d7596b9dcb20781cb0ba661d88cd">convertGeneric</a>( <span class="keyword">final</span> List&lt;Literal&gt; p_literals )</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">new</span> HashSet&lt;ILiteral&lt;Literal&gt;&gt;()</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        {{</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">for</span> ( <span class="keyword">final</span> Literal l_literal : p_literals )</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                add( <span class="keyword">new</span> <a class="code" href="../../da/d24/a00068.htm">CLiteral</a>( l_literal ) );</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }};</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">     * converts a NumberTerm into a Double Atom</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">     * @param p_number NumberTerm</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">     * @return Double Atom</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#aed928aa6a449567644e079da04a742e2">  130</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">static</span> <a class="code" href="../../d9/dec/a00090.htm">CNumberAtom</a> <a class="code" href="../../d8/d41/a00038.htm#aed928aa6a449567644e079da04a742e2">convertGeneric</a>( <span class="keyword">final</span> NumberTerm p_number )</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">try</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="../../d9/dec/a00090.htm">CNumberAtom</a>( p_number.solve() );</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">catch</span> ( NoValueException l_exception )</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            CLogger.error( l_exception );</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">return</span> null;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     * converts a term into a generic ITerm</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     * @param p_term original term</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     * @return converted generic term</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#a1fa1099e699e080fe4d491e478ec6657">  151</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">static</span> <a class="code" href="../../d9/dd0/a00191.htm">ITerm</a> <a class="code" href="../../d8/d41/a00038.htm#a1fa1099e699e080fe4d491e478ec6657">convertGeneric</a>( <span class="keyword">final</span> Term p_term )</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">if</span> ( p_term == null )</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="../../d9/dd0/a00191.htm">ITerm</a>()</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                @Override</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keyword">public</span> <span class="keywordtype">boolean</span> instanceOf( Class&lt;?&gt; p_class )</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    <span class="keywordflow">return</span> ITerm.class.isAssignableFrom( p_class );</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            };</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">if</span> ( p_term.isNumeric() )</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="../../d8/d41/a00038.htm#a8d2b8fac3c0497ef857ec75bb1978e22">convertGeneric</a>( (NumberTerm) p_term );</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">if</span> ( p_term instanceof StringTerm )</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="../../d8/d41/a00038.htm#a8d2b8fac3c0497ef857ec75bb1978e22">convertGeneric</a>( (StringTerm) p_term );</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">if</span> ( p_term.isAtom() )</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="../../d8/d41/a00038.htm#a8d2b8fac3c0497ef857ec75bb1978e22">convertGeneric</a>( (Atom) p_term );</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">if</span> ( p_term.isLiteral() )</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="../../da/d24/a00068.htm">CLiteral</a>( (Literal) p_term );</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">if</span> ( p_term.isList() )</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="../../dd/d42/a00109.htm">CTermList</a>()</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    <span class="keywordflow">for</span> ( <span class="keyword">final</span> Term l_term : (ListTerm) p_term )</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        add( <a class="code" href="../../d8/d41/a00038.htm#a8d2b8fac3c0497ef857ec75bb1978e22">convertGeneric</a>( l_term ) );</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            };</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">throw</span> <span class="keyword">new</span> IllegalArgumentException( de.tu_clausthal.in.mec.common.CCommon.getResourceString( <a class="code" href="../../d1/dc6/a00037.htm">CCommon</a>.class, <span class="stringliteral">&quot;convertgenericfail&quot;</span> ) );</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     * converts Jason Term to Java types to complex types e.g. List -&gt; Geoposition</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">     * @param p_term Jason term</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">     * @param p_type type list with the target type</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">     * @return Java value</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    @SuppressWarnings( <span class="stringliteral">&quot;unchecked&quot;</span> )</div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#a317a31e5417b16936c02060f862506f3">  196</a></span>&#160;    public static Object getJavaValue( final Term p_term, final Class&lt;?&gt; p_type ) throws NoValueException</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">if</span> ( GeoPosition.class.isAssignableFrom( p_type ) )</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">if</span> ( ( !p_term.isList() ) || ( ( (ListTerm) p_term ).size() != 2 ) )</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                <span class="keywordflow">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                        de.tu_clausthal.in.mec.common.CCommon.getResourceString(</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                <a class="code" href="../../d1/dc6/a00037.htm">CCommon</a>.class, <span class="stringliteral">&quot;jasontocustomjava&quot;</span>, GeoPosition.class.getCanonicalName(), p_term</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                        )</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                );</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> GeoPosition(</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    ( (Number) <a class="code" href="../../d8/d41/a00038.htm#a317a31e5417b16936c02060f862506f3">getJavaValue</a>( ( (ListTerm) p_term ).<span class="keyword">get</span>( 0 ) ) ).doubleValue(), ( (Number) <a class="code" href="../../d8/d41/a00038.htm#a317a31e5417b16936c02060f862506f3">getJavaValue</a>(</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    ( (ListTerm) p_term ).<span class="keyword">get</span>( 1 )</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            ) ).doubleValue()</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            );</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="comment">// check for numbers</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">if</span> ( Number.class.isAssignableFrom( p_type ) )</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="../../d8/d41/a00038.htm#a317a31e5417b16936c02060f862506f3">getJavaValue</a>( ( (NumberTerm) p_term ).solve(), p_type );</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d8/d41/a00038.htm#a317a31e5417b16936c02060f862506f3">getJavaValue</a>( p_term );</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">     * Jason does not support Java-type binding, so an explicit converting of</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">     * Jason types to the corresponding Java type is needed</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">     * @param p_term Jason term</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">     * @return Java type</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">     * @throws NoValueException on empty value</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    @SuppressWarnings( <span class="stringliteral">&quot;unchecked&quot;</span> )</div>
<div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#ab1e8c23d7532721e3c80939487a9c58c">  231</a></span>&#160;    public static Object getJavaValue( final Term p_term ) throws NoValueException</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">if</span> ( p_term.isList() )</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="keyword">final</span> List&lt;Object&gt; l_return = <span class="keyword">new</span> LinkedList&lt;&gt;();</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordflow">for</span> ( <span class="keyword">final</span> Term l_term : (ListTerm) p_term )</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                l_return.add( <a class="code" href="../../d8/d41/a00038.htm#a317a31e5417b16936c02060f862506f3">getJavaValue</a>( l_term ) );</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <span class="keywordflow">return</span> l_return;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">if</span> ( p_term.isNumeric() )</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <span class="keywordflow">return</span> ( (NumberTerm) p_term ).solve();</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">if</span> ( p_term.isString() )</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <span class="keywordflow">return</span> ( (StringTerm) p_term ).getString();</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordflow">if</span> ( p_term.isAtom() )</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="../../d8/d41/a00038.htm#a344161224ff36771399a98389761469f">clearString</a>( p_term.toString() );</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">throw</span> <span class="keyword">new</span> IllegalArgumentException( de.tu_clausthal.in.mec.common.CCommon.getResourceString( <a class="code" href="../../d1/dc6/a00037.htm">CCommon</a>.class, <span class="stringliteral">&quot;jasontodefaultjava&quot;</span>, p_term ) );</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">     * creates a Jason literal with optional data</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">     * @param p_name name of the literal</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">     * @param p_data data of the literal</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">     * @return literal object</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    @SuppressWarnings( <span class="stringliteral">&quot;unchecked&quot;</span> )</div>
<div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#a741697d3ede5daad308d468baa717e61">  261</a></span>&#160;    public static Literal getLiteral( final String p_name, final Object... p_data )</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keyword">final</span> Term[] l_terms = <span class="keyword">new</span> Term[p_data.length];</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i = 0; i &lt; p_data.length; ++i )</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            l_terms[i] = <a class="code" href="../../d8/d41/a00038.htm#ac4c25cacbba0ea0607bbca326dc3355e">getTerm</a>( p_data[i] );</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keywordflow">return</span> ASSyntax.createLiteral( p_name, l_terms );</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">     * returns an atom</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">     * @param p_atom name of the atom</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">     * @return literal object</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00276"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#a8a814db8aa1e6e1f3204adc3b957b7b3">  276</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">static</span> Literal <a class="code" href="../../d8/d41/a00038.htm#a8a814db8aa1e6e1f3204adc3b957b7b3">getLiteral</a>( <span class="keyword">final</span> String p_atom )</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    {</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">return</span> ASSyntax.createAtom( <a class="code" href="../../d8/d41/a00038.htm#a9c330af0719f0836e20137a665708ede">getLiteralName</a>( p_atom ) );</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">     * converts a Double into a number object with correct type structure</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">     * @param p_value double value</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">     * @param p_class class that is the target type</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">     * @return converted boxed-type</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#ac98274ee99cac17a21791c01278ea358">  288</a></span>&#160;    <span class="keyword">private</span> <span class="keyword">static</span> Number <a class="code" href="../../d8/d41/a00038.htm#ac98274ee99cac17a21791c01278ea358">getJavaValue</a>( <span class="keyword">final</span> Double p_value, <span class="keyword">final</span> Class&lt;?&gt; p_class )</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">if</span> ( ( p_class.equals( Byte.class ) ) || ( p_class.equals( Byte.TYPE ) ) )</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> Byte( p_value.byteValue() );</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keywordflow">if</span> ( ( p_class.equals( Double.class ) ) || ( p_class.equals( Double.TYPE ) ) )</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keywordflow">return</span> p_value;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">if</span> ( ( p_class.equals( Float.class ) ) || ( p_class.equals( Float.TYPE ) ) )</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> Float( p_value.floatValue() );</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keywordflow">if</span> ( ( p_class.equals( Integer.class ) ) || ( p_class.equals( Integer.TYPE ) ) )</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> Integer( p_value.intValue() );</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">if</span> ( ( p_class.equals( Long.class ) ) || ( p_class.equals( Long.TYPE ) ) )</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> Long( p_value.longValue() );</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">if</span> ( ( p_class.equals( Short.class ) ) || ( p_class.equals( Short.TYPE ) ) )</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> Short( p_value.shortValue() );</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">throw</span> <span class="keyword">new</span> IllegalArgumentException( <span class="stringliteral">&quot;class unknown&quot;</span> );</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">     * checks a literal name and convert it to the correct syntax</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">     * @param p_name name of the literal</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">     * @return converted literal name</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">     * @note note the precendence of the data types</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00314"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#a9c330af0719f0836e20137a665708ede">  314</a></span>&#160;    <span class="keyword">private</span> <span class="keyword">static</span> String <a class="code" href="../../d8/d41/a00038.htm#a9c330af0719f0836e20137a665708ede">getLiteralName</a>( <span class="keyword">final</span> String p_name )</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">if</span> ( ( p_name == null ) || ( p_name.isEmpty() ) )</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                    de.tu_clausthal.in.mec.common.CCommon.getResourceString(</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                            de.tu_clausthal.in.mec.object.mas.jason.CCommon.class, <span class="stringliteral">&quot;namenotempty&quot;</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                    )</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            );</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="comment">// first char must be lower-case - split on spaces and create camel-case</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keyword">final</span> String[] l_parts = p_name.split( <span class="stringliteral">&quot; &quot;</span> );</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i = 0; i &lt; l_parts.length; i++ )</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            l_parts[i] = ( i == 0 ? l_parts[i].substring( 0, 1 ).toLowerCase() : l_parts[i].substring( 0, 1 ).toUpperCase() ) + l_parts[i].substring( 1 );</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordflow">return</span> StringUtils.join( l_parts );</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    }</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">     * convert data type into Jason term</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">     * @param p_data Jason Term value</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">     * @return Jason term</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    @SuppressWarnings( <span class="stringliteral">&quot;unchecked&quot;</span> )</div>
<div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="../../d8/d41/a00038.htm#ac4c25cacbba0ea0607bbca326dc3355e">  338</a></span>&#160;    private static Term getTerm( final Object p_data )</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="comment">// null value into atom</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordflow">if</span> ( p_data == null )</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="keywordflow">return</span> ASSyntax.createAtom( <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="comment">// term pass back</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="keywordflow">if</span> ( p_data instanceof Term )</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="keywordflow">return</span> (Term) p_data;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="comment">// number value into number</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordflow">if</span> ( p_data instanceof Number )</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="keywordflow">return</span> ASSyntax.createNumber( ( (Number) p_data ).doubleValue() );</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="comment">// GeoPosition</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordflow">if</span> ( p_data instanceof GeoPosition )</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keywordflow">return</span> ASSyntax.createLiteral(</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                    <span class="stringliteral">&quot;geoposition&quot;</span>,</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                    ASSyntax.createLiteral( <span class="stringliteral">&quot;latitude&quot;</span>, ASSyntax.createNumber( ( (GeoPosition) p_data ).getLatitude() ) ),</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                    ASSyntax.createLiteral( <span class="stringliteral">&quot;longitude&quot;</span>, ASSyntax.createNumber( ( (GeoPosition) p_data ).getLongitude() ) )</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            );</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="comment">// Edge</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">if</span> ( p_data instanceof EdgeIteratorState )</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            <span class="keywordflow">return</span> ASSyntax.createLiteral(</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                    <span class="stringliteral">&quot;edge&quot;</span>,</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                    ASSyntax.createLiteral( <span class="stringliteral">&quot;id&quot;</span>, ASSyntax.createNumber( ( (EdgeIteratorState) p_data ).getEdge() ) ),</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                    ASSyntax.createLiteral( <span class="stringliteral">&quot;name&quot;</span>, ASSyntax.createString( ( (EdgeIteratorState) p_data ).getName() ) ),</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                    ASSyntax.createLiteral( <span class="stringliteral">&quot;distance&quot;</span>, ASSyntax.createNumber( ( (EdgeIteratorState) p_data ).getDistance() ) )</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            );</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="comment">// pair into complex term</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keywordflow">if</span> ( p_data instanceof Pair )</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            <span class="keywordflow">return</span> ASSyntax.createLiteral(</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                    <span class="stringliteral">&quot;pair&quot;</span>,</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    ASSyntax.createLiteral( <span class="stringliteral">&quot;left&quot;</span>, <a class="code" href="../../d8/d41/a00038.htm#ac4c25cacbba0ea0607bbca326dc3355e">getTerm</a>( ( (Pair) p_data ).getLeft() ) ),</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                    ASSyntax.createLiteral( <span class="stringliteral">&quot;right&quot;</span>, <a class="code" href="../../d8/d41/a00038.htm#ac4c25cacbba0ea0607bbca326dc3355e">getTerm</a>( ( (Pair) p_data ).getRight() ) )</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            );</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="comment">// triple into complex term</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordflow">if</span> ( p_data instanceof Triple )</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            <span class="keywordflow">return</span> ASSyntax.createLiteral(</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    <span class="stringliteral">&quot;triple&quot;</span>,</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    ASSyntax.createLiteral( <span class="stringliteral">&quot;left&quot;</span>, <a class="code" href="../../d8/d41/a00038.htm#ac4c25cacbba0ea0607bbca326dc3355e">getTerm</a>( ( (Triple) p_data ).getLeft() ) ),</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                    ASSyntax.createLiteral( <span class="stringliteral">&quot;right&quot;</span>, <a class="code" href="../../d8/d41/a00038.htm#ac4c25cacbba0ea0607bbca326dc3355e">getTerm</a>( ( (Triple) p_data ).getRight() ) ),</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    ASSyntax.createLiteral( <span class="stringliteral">&quot;middle&quot;</span>, <a class="code" href="../../d8/d41/a00038.htm#ac4c25cacbba0ea0607bbca326dc3355e">getTerm</a>( ( (Triple) p_data ).getMiddle() ) )</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            );</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="comment">// map into complex term list</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordflow">if</span> ( p_data instanceof Map )</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            <span class="keywordflow">return</span> ASSyntax.createList(</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                    <span class="keyword">new</span> LinkedList&lt;Term&gt;()</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                    {{</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                        <span class="keywordflow">for</span> ( <span class="keyword">final</span> Object l_item : ( (Map) p_data ).entrySet() )</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                            add(</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                    ASSyntax.createLiteral(</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                            ( (Map.Entry&lt;?, ?&gt;) l_item ).getKey().toString(), <a class="code" href="../../d8/d41/a00038.htm#ac4c25cacbba0ea0607bbca326dc3355e">getTerm</a>(</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                                    ( (Map.Entry&lt;?, ?&gt;) l_item ).getValue()</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                            )</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                    )</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                            );</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                    }}</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            );</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="comment">// collection into term list</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keywordflow">if</span> ( p_data instanceof Collection )</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            <span class="keywordflow">return</span> ASSyntax.createList( (Collection) p_data );</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="comment">// otherwise to string</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordflow">return</span> ASSyntax.createString( p_data );</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    }</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;}</div>
<div class="ttc" id="a00068_htm"><div class="ttname"><a href="../../da/d24/a00068.htm">de.tu_clausthal.in.mec.object.mas.jason.belief.CLiteral</a></div><div class="ttdoc">class for literals </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d3e/a00253_source.htm#l00038">jason/belief/CLiteral.java:38</a></div></div>
<div class="ttc" id="a00038_htm_a7389d7596b9dcb20781cb0ba661d88cd"><div class="ttname"><a href="../../d8/d41/a00038.htm#a7389d7596b9dcb20781cb0ba661d88cd">de.tu_clausthal.in.mec.object.mas.jason.CCommon.convertGeneric</a></div><div class="ttdeci">static Set&lt; ILiteral&lt; Literal &gt; &gt; convertGeneric(final List&lt; Literal &gt; p_literals)</div><div class="ttdoc">converts a jason specific set of literals to a generic one </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00114">object/mas/jason/CCommon.java:114</a></div></div>
<div class="ttc" id="a00038_htm_a344161224ff36771399a98389761469f"><div class="ttname"><a href="../../d8/d41/a00038.htm#a344161224ff36771399a98389761469f">de.tu_clausthal.in.mec.object.mas.jason.CCommon.clearString</a></div><div class="ttdeci">static String clearString(final String p_input)</div><div class="ttdoc">Jason creates quoted string, so we need to clean the string to create corrected Java strings...</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00081">object/mas/jason/CCommon.java:81</a></div></div>
<div class="ttc" id="a00037_htm"><div class="ttname"><a href="../../d1/dc6/a00037.htm">de.tu_clausthal.in.mec.common.CCommon</a></div><div class="ttdoc">class for any helper calls </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d53/a00232_source.htm#l00060">common/CCommon.java:60</a></div></div>
<div class="ttc" id="a00038_htm_ae2bc7c0c408fb6253271b26c76034d38"><div class="ttname"><a href="../../d8/d41/a00038.htm#ae2bc7c0c408fb6253271b26c76034d38">de.tu_clausthal.in.mec.object.mas.jason.CCommon.CCommon</a></div><div class="ttdeci">CCommon()</div><div class="ttdoc">private ctor - avoid instantiation </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00071">object/mas/jason/CCommon.java:71</a></div></div>
<div class="ttc" id="a00038_htm_aa2752d3655a6f239889ad7a4e52ef3df"><div class="ttname"><a href="../../d8/d41/a00038.htm#aa2752d3655a6f239889ad7a4e52ef3df">de.tu_clausthal.in.mec.object.mas.jason.CCommon.DEFAULTANNOTATION</a></div><div class="ttdeci">static final Literal DEFAULTANNOTATION</div><div class="ttdoc">default source annotation &quot;source(self)&quot; </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00065">object/mas/jason/CCommon.java:65</a></div></div>
<div class="ttc" id="a00109_htm"><div class="ttname"><a href="../../dd/d42/a00109.htm">de.tu_clausthal.in.mec.object.mas.generic.implementation.CTermList</a></div><div class="ttdoc">generic term list for agent literals </div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d7b/a00286_source.htm#l00039">CTermList.java:39</a></div></div>
<div class="ttc" id="a00038_htm_aed928aa6a449567644e079da04a742e2"><div class="ttname"><a href="../../d8/d41/a00038.htm#aed928aa6a449567644e079da04a742e2">de.tu_clausthal.in.mec.object.mas.jason.CCommon.convertGeneric</a></div><div class="ttdeci">static CNumberAtom convertGeneric(final NumberTerm p_number)</div><div class="ttdoc">converts a NumberTerm into a Double Atom </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00130">object/mas/jason/CCommon.java:130</a></div></div>
<div class="ttc" id="a00038_htm_a9c330af0719f0836e20137a665708ede"><div class="ttname"><a href="../../d8/d41/a00038.htm#a9c330af0719f0836e20137a665708ede">de.tu_clausthal.in.mec.object.mas.jason.CCommon.getLiteralName</a></div><div class="ttdeci">static String getLiteralName(final String p_name)</div><div class="ttdoc">checks a literal name and convert it to the correct syntax </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00314">object/mas/jason/CCommon.java:314</a></div></div>
<div class="ttc" id="a00103_htm"><div class="ttname"><a href="../../d5/d1e/a00103.htm">de.tu_clausthal.in.mec.object.mas.generic.implementation.CStringAtom</a></div><div class="ttdoc">string atom class for agent literals </div><div class="ttdef"><b>Definition:</b> <a href="../../dc/dc9/a00282_source.htm#l00031">CStringAtom.java:31</a></div></div>
<div class="ttc" id="a00038_htm_ac4c25cacbba0ea0607bbca326dc3355e"><div class="ttname"><a href="../../d8/d41/a00038.htm#ac4c25cacbba0ea0607bbca326dc3355e">de.tu_clausthal.in.mec.object.mas.jason.CCommon.getTerm</a></div><div class="ttdeci">static Term getTerm(final Object p_data)</div><div class="ttdoc">convert data type into Jason term </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00338">object/mas/jason/CCommon.java:338</a></div></div>
<div class="ttc" id="a00038_htm_a1fa1099e699e080fe4d491e478ec6657"><div class="ttname"><a href="../../d8/d41/a00038.htm#a1fa1099e699e080fe4d491e478ec6657">de.tu_clausthal.in.mec.object.mas.jason.CCommon.convertGeneric</a></div><div class="ttdeci">static ITerm convertGeneric(final Term p_term)</div><div class="ttdoc">converts a term into a generic ITerm </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00151">object/mas/jason/CCommon.java:151</a></div></div>
<div class="ttc" id="a00038_htm_a8a814db8aa1e6e1f3204adc3b957b7b3"><div class="ttname"><a href="../../d8/d41/a00038.htm#a8a814db8aa1e6e1f3204adc3b957b7b3">de.tu_clausthal.in.mec.object.mas.jason.CCommon.getLiteral</a></div><div class="ttdeci">static Literal getLiteral(final String p_atom)</div><div class="ttdoc">returns an atom </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00276">object/mas/jason/CCommon.java:276</a></div></div>
<div class="ttc" id="a00038_htm_a8d2b8fac3c0497ef857ec75bb1978e22"><div class="ttname"><a href="../../d8/d41/a00038.htm#a8d2b8fac3c0497ef857ec75bb1978e22">de.tu_clausthal.in.mec.object.mas.jason.CCommon.convertGeneric</a></div><div class="ttdeci">static CStringAtom convertGeneric(final Atom p_atom)</div><div class="ttdoc">converts an atom into a string atom </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00092">object/mas/jason/CCommon.java:92</a></div></div>
<div class="ttc" id="a00071_htm"><div class="ttname"><a href="../../d0/d89/a00071.htm">de.tu_clausthal.in.mec.CLogger</a></div><div class="ttdoc">Logger class with additional Log4j support. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d04/a00255_source.htm#l00042">CLogger.java:42</a></div></div>
<div class="ttc" id="a00191_htm"><div class="ttname"><a href="../../d9/dd0/a00191.htm">de.tu_clausthal.in.mec.object.mas.generic.ITerm</a></div><div class="ttdoc">term interface </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d48/a00351_source.htm#l00030">ITerm.java:30</a></div></div>
<div class="ttc" id="a00038_htm_a02b5e34a57a3a59774c4e9db64ee4677"><div class="ttname"><a href="../../d8/d41/a00038.htm#a02b5e34a57a3a59774c4e9db64ee4677">de.tu_clausthal.in.mec.object.mas.jason.CCommon.convertGeneric</a></div><div class="ttdeci">static CStringAtom convertGeneric(final StringTerm p_term)</div><div class="ttdoc">converts a StringTerm into a string atom </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00103">object/mas/jason/CCommon.java:103</a></div></div>
<div class="ttc" id="a00038_htm_ac98274ee99cac17a21791c01278ea358"><div class="ttname"><a href="../../d8/d41/a00038.htm#ac98274ee99cac17a21791c01278ea358">de.tu_clausthal.in.mec.object.mas.jason.CCommon.getJavaValue</a></div><div class="ttdeci">static Number getJavaValue(final Double p_value, final Class&lt;?&gt; p_class)</div><div class="ttdoc">converts a Double into a number object with correct type structure </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00288">object/mas/jason/CCommon.java:288</a></div></div>
<div class="ttc" id="a00090_htm"><div class="ttname"><a href="../../d9/dec/a00090.htm">de.tu_clausthal.in.mec.object.mas.generic.implementation.CNumberAtom</a></div><div class="ttdoc">numeric atom class for agent literals </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d2a/a00270_source.htm#l00031">CNumberAtom.java:31</a></div></div>
<div class="ttc" id="a00038_htm_a317a31e5417b16936c02060f862506f3"><div class="ttname"><a href="../../d8/d41/a00038.htm#a317a31e5417b16936c02060f862506f3">de.tu_clausthal.in.mec.object.mas.jason.CCommon.getJavaValue</a></div><div class="ttdeci">static Object getJavaValue(final Term p_term, final Class&lt;?&gt; p_type)</div><div class="ttdoc">converts Jason Term to Java types to complex types e.g. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/de1/a00233_source.htm#l00196">object/mas/jason/CCommon.java:196</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div id = "nav-path" class = "navpath" >
    <ul >
        <li >
            <a href = "https://github.com/flashpixx/MecSim" >MecSim - Traffic Simulation</a ></li >
    </ul >
</div >
