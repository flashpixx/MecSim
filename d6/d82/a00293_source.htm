<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>MecSim - Traffic Simulation: CTreeBeliefBase.java Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.js", "TeX/AMSsymbols.js", "TeX/MathTools.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../layout.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">MecSim - Traffic Simulation
   </div>
   <div id="projectbrief">micro traffic simulation with layered world structure</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../namespaces.htm"><span>Packages</span></a></li>
      <li><a href="../../annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d6/d82/a00293_source.htm','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CTreeBeliefBase.java</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d6/d82/a00293.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * @cond LICENSE</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * ######################################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * # GPL License                                                                        #</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * #                                                                                    #</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * # This file is part of the micro agent-based traffic simulation MecSim of            #</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * # Clausthal University of Technology - Mobile and Enterprise Computing               #</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * # Copyright (c) 2014-15, Philipp Kraus (philipp.kraus@tu-clausthal.de)               #</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * # This program is free software: you can redistribute it and/or modify               #</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * # it under the terms of the GNU General Public License as                            #</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * # published by the Free Software Foundation, either version 3 of the                 #</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * # License, or (at your option) any later version.                                    #</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * #                                                                                    #</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * # This program is distributed in the hope that it will be useful,                    #</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * # but WITHOUT ANY WARRANTY; without even the implied warranty of                     #</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      #</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * # GNU General Public License for more details.                                       #</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * #                                                                                    #</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * # You should have received a copy of the GNU General Public License                  #</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * # along with this program. If not, see http://www.gnu.org/licenses/                  #</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * ######################################################################################</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * @endcond</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">package </span>de.tu_clausthal.in.mec.object.mas.jason.belief;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">import</span> <a class="code" href="../../dc/d54/a00094.htm">de.tu_clausthal.in.mec.common.CPath</a>;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">import</span> de.tu_clausthal.in.mec.object.mas.generic.IBeliefBaseMask;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">import</span> de.tu_clausthal.in.mec.object.mas.generic.ILiteral;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">import</span> de.tu_clausthal.in.mec.object.mas.generic.implementation.CBeliefStorage;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">import</span> de.tu_clausthal.in.mec.runtime.message.IMessage;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">import</span> jason.asSemantics.Agent;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">import</span> jason.asSemantics.Unifier;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">import</span> jason.asSyntax.ASSyntax;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">import</span> jason.asSyntax.Literal;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">import</span> jason.asSyntax.PredicateIndicator;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">import</span> jason.bb.BeliefBase;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">import</span> org.apache.commons.lang3.tuple.ImmutablePair;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">import</span> org.apache.commons.lang3.tuple.Pair;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">import</span> org.w3c.dom.Document;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">import</span> org.w3c.dom.Element;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">import</span> java.util.Iterator;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">import</span> java.util.Set;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> * beliefbase which wraps all Jason structures</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm">   51</a></span>&#160;<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class </span><a class="code" href="../../d9/d4b/a00117.htm">CTreeBeliefBase</a> <span class="keyword">implements</span> BeliefBase, IBeliefBaseMask.IGenerator&lt;Literal&gt;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">     * path separator of agent belief</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a54f4c3c420a32e12992092a537c57ca0">   57</a></span>&#160;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String <a class="code" href="../../d9/d4b/a00117.htm#a54f4c3c420a32e12992092a537c57ca0">c_agentbeliefseparator</a> = <span class="stringliteral">&quot;_&quot;</span>;<span class="comment"></span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     * binding replacing prefix - the prefix will be removed from the binding belief name</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a29e736930814144ee57fab36ace3361d">   61</a></span>&#160;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String <a class="code" href="../../d9/d4b/a00117.htm#a29e736930814144ee57fab36ace3361d">c_beliefbindprefixreplace</a> = <span class="stringliteral">&quot;m_&quot;</span>;<span class="comment"></span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">     * name of the root beliefbase and its mask</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#ac01585d4e757b4388c97d69c43367c56">   65</a></span>&#160;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <a class="code" href="../../dc/d54/a00094.htm">CPath</a> <a class="code" href="../../d9/d4b/a00117.htm#ac01585d4e757b4388c97d69c43367c56">c_beliefbaseroot</a> = <span class="keyword">new</span> <a class="code" href="../../dc/d54/a00094.htm">CPath</a>( <span class="stringliteral">&quot;root&quot;</span> );<span class="comment"></span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     * name of the binding beliefbase and its mask</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a27a53edc64e41ce0a3ebb63ac3a5274c">   69</a></span>&#160;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <a class="code" href="../../dc/d54/a00094.htm">CPath</a> <a class="code" href="../../d9/d4b/a00117.htm#a27a53edc64e41ce0a3ebb63ac3a5274c">c_beliefbasebind</a> = <span class="keyword">new</span> <a class="code" href="../../dc/d54/a00094.htm">CPath</a>( <span class="stringliteral">&quot;bind&quot;</span> );<span class="comment"></span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">     * name of the message beliefbase and its mask</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a713d5212c41768a70fac38dc6762ae1a">   73</a></span>&#160;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <a class="code" href="../../dc/d54/a00094.htm">CPath</a> <a class="code" href="../../d9/d4b/a00117.htm#a713d5212c41768a70fac38dc6762ae1a">c_beliefbasemessage</a> = <span class="keyword">new</span> <a class="code" href="../../dc/d54/a00094.htm">CPath</a>( <span class="stringliteral">&quot;message&quot;</span> );<span class="comment"></span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">     * root beliefbase</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#ae329bec90be424e82a50fc8beb3340c9">   77</a></span>&#160;    <span class="keyword">private</span> <span class="keyword">final</span> <a class="code" href="../../d1/d09/a00077.htm">CMask</a> <a class="code" href="../../d9/d4b/a00117.htm#ae329bec90be424e82a50fc8beb3340c9">m_mask</a> = <span class="keyword">new</span> <a class="code" href="../../df/d86/a00012.htm">CBeliefBase</a>( <span class="keyword">new</span> CBeliefStorage&lt;&gt;(), <a class="code" href="../../d9/d4b/a00117.htm#a54f4c3c420a32e12992092a537c57ca0">c_agentbeliefseparator</a> ).createMask( c_beliefbaseroot.getSuffix() );</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     * ctor</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#afdd95706f36ace1c51cf7d9f9cb8c5e0">   83</a></span>&#160;    <span class="keyword">public</span> <a class="code" href="../../d9/d4b/a00117.htm#afdd95706f36ace1c51cf7d9f9cb8c5e0">CTreeBeliefBase</a>()</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        m_mask.setPathSeparator( <a class="code" href="../../d9/d4b/a00117.htm#a54f4c3c420a32e12992092a537c57ca0">c_agentbeliefseparator</a> );</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="comment">// set binding-beliefbase</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        m_mask.add(</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keyword">new</span> <a class="code" href="../../df/d86/a00012.htm">CBeliefBase</a>(</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                        <span class="comment">// not the order of replacing arguments</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        <span class="keyword">new</span> <a class="code" href="../../db/db2/a00020.htm">CBindingStorage</a>( <a class="code" href="../../d9/d4b/a00117.htm#a29e736930814144ee57fab36ace3361d">c_beliefbindprefixreplace</a>, <a class="code" href="../../d9/d4b/a00117.htm#a54f4c3c420a32e12992092a537c57ca0">c_agentbeliefseparator</a> ), <a class="code" href="../../d9/d4b/a00117.htm#a54f4c3c420a32e12992092a537c57ca0">c_agentbeliefseparator</a></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                ).&lt;IBeliefBaseMask&lt;Literal&gt;&gt;createMask( <a class="code" href="../../d9/d4b/a00117.htm#a27a53edc64e41ce0a3ebb63ac3a5274c">c_beliefbasebind</a>.<a class="code" href="../../dc/d54/a00094.htm#a126a8674038ce8036263f7c317a4830d">getSuffix</a>() )</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        );</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">     * set agent to the beliefbase for message system, can be set once</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">     * @param p_agent agent which will be connected with the beliefbase</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">     * @param p_agentnameseparator agent name seperator used by the message beliefbase</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a94431e1c6ea0361eada19cba02655f91">  102</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d4b/a00117.htm#a94431e1c6ea0361eada19cba02655f91">setMessageBeliefbase</a>( <span class="keyword">final</span> Agent p_agent, <span class="keyword">final</span> String p_agentnameseparator )</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">if</span> ( <a class="code" href="../../d9/d4b/a00117.htm#ae329bec90be424e82a50fc8beb3340c9">m_mask</a>.containsMask( <a class="code" href="../../d9/d4b/a00117.htm#a713d5212c41768a70fac38dc6762ae1a">c_beliefbasemessage</a> ) )</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        m_mask.add(</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keyword">new</span> <a class="code" href="../../df/d86/a00012.htm">CBeliefBase</a>(</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        <span class="keyword">new</span> <a class="code" href="../../d8/d53/a00081.htm">CMessageStorage</a>( p_agent.getTS(), p_agentnameseparator ), <a class="code" href="../../d9/d4b/a00117.htm#a54f4c3c420a32e12992092a537c57ca0">c_agentbeliefseparator</a></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                ).&lt;IBeliefBaseMask&lt;Literal&gt;&gt;createMask( <a class="code" href="../../d9/d4b/a00117.htm#a713d5212c41768a70fac38dc6762ae1a">c_beliefbasemessage</a>.<a class="code" href="../../dc/d54/a00094.htm#a126a8674038ce8036263f7c317a4830d">getSuffix</a>() )</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        );</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">     * bind an object to the binding-beliefbase</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">     * @param p_bindname bind name</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">     * @param p_bind bind object</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a932df8358fa426d589515b56d8286f2a">  121</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d4b/a00117.htm#a932df8358fa426d589515b56d8286f2a">bind</a>( <span class="keyword">final</span> String p_bindname, <span class="keyword">final</span> Object p_bind )</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        m_mask.getMask( <a class="code" href="../../d9/d4b/a00117.htm#a27a53edc64e41ce0a3ebb63ac3a5274c">c_beliefbasebind</a> ).&lt;<a class="code" href="../../db/db2/a00020.htm">CBindingStorage</a>&gt;getStorage().push( p_bindname, p_bind );</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">     * unbind an object from the binding-beliefbase</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">     * @param p_bindname bind name</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a16209a37d316ddc5ab5612b9c3eb82c4">  131</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d4b/a00117.htm#a16209a37d316ddc5ab5612b9c3eb82c4">unbind</a>( <span class="keyword">final</span> String p_bindname )</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        m_mask.getMask( <a class="code" href="../../d9/d4b/a00117.htm#a27a53edc64e41ce0a3ebb63ac3a5274c">c_beliefbasebind</a> ).&lt;<a class="code" href="../../db/db2/a00020.htm">CBindingStorage</a>&gt;getStorage().removeBinding( p_bindname );</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">     * returns the root mask</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">     * @return root mask</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a5b367d9bd299fd23dfa2f6997ea2dc12">  141</a></span>&#160;    <span class="keyword">public</span> IBeliefBaseMask&lt;Literal&gt; <a class="code" href="../../d9/d4b/a00117.htm#a5b367d9bd299fd23dfa2f6997ea2dc12">getRootMask</a>()</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d9/d4b/a00117.htm#ae329bec90be424e82a50fc8beb3340c9">m_mask</a>;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     * removes an item from the bliefbase</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     * @param p_path item path</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a3bd62f0d362425229a3945f457ebfce6">  152</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">void</span> <span class="keyword">remove</span>( <span class="keyword">final</span> <a class="code" href="../../dc/d54/a00094.htm">CPath</a> p_path )</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        m_mask.remove( p_path );</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">     * adds a mask to the beliefbase</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#afb4fffe321b7d68fc3b0e2c56626fa59">  160</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d4b/a00117.htm#afb4fffe321b7d68fc3b0e2c56626fa59">add</a>( <span class="keyword">final</span> <a class="code" href="../../dc/d54/a00094.htm">CPath</a> p_path, <span class="keyword">final</span> IBeliefBaseMask&lt;Literal&gt; p_mask )</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        m_mask.add( p_mask );</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">     * sets the messages to the message-beliefbase</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     * @param p_messages set of messages</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#ac5062d04f88be8b538bd74edd5daff2b">  171</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d4b/a00117.htm#ac5062d04f88be8b538bd74edd5daff2b">setMessages</a>( <span class="keyword">final</span> Set&lt;IMessage&gt; p_messages )</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">if</span> ( !<a class="code" href="../../d9/d4b/a00117.htm#ae329bec90be424e82a50fc8beb3340c9">m_mask</a>.containsMask( <a class="code" href="../../d9/d4b/a00117.htm#a713d5212c41768a70fac38dc6762ae1a">c_beliefbasemessage</a> ) )</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        m_mask.getMask( <a class="code" href="../../d9/d4b/a00117.htm#a713d5212c41768a70fac38dc6762ae1a">c_beliefbasemessage</a> ).&lt;<a class="code" href="../../d8/d53/a00081.htm">CMessageStorage</a>&gt;getStorage().receiveMessage( p_messages );</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     * updates all internal data structures,</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     * should be called on the agent cycle</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a360d69bcb23f1b4df2480f8f5ac00bc0">  184</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d4b/a00117.htm#a360d69bcb23f1b4df2480f8f5ac00bc0">update</a>()</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        m_mask.update();</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">     * adds a literal and its belief structure to the agent beliefbase</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">     * @param p_literal literal with prefix</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">     * @param p_addliteral adds the literal to the created structure</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a9eb658d5378fcd71dabe8d0459be93c9">  196</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d4b/a00117.htm#a9eb658d5378fcd71dabe8d0459be93c9">generateTreeStructure</a>( <span class="keyword">final</span> Literal p_literal, <span class="keyword">final</span> <span class="keywordtype">boolean</span> p_addliteral )</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keyword">final</span> Pair&lt;CPath, CLiteral&gt; l_pathliteral = this.createPathLiteral( p_literal );</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="comment">// add the belief to the structure</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">if</span> ( p_addliteral )</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            m_mask.add( l_pathliteral.getLeft(), l_pathliteral.getRight(), this );</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            m_mask.add( l_pathliteral.getLeft(), <span class="keyword">this</span> );</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    }</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    @Override</div>
<div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a4450978b3248ecdaa8eed36113057397">  208</a></span>&#160;    <span class="keyword">public</span> IBeliefBaseMask&lt;Literal&gt; <a class="code" href="../../d9/d4b/a00117.htm#a4450978b3248ecdaa8eed36113057397">createBeliefbase</a>( <span class="keyword">final</span> String p_name )</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="../../df/d86/a00012.htm">CBeliefBase</a>( <span class="keyword">new</span> CBeliefStorage&lt;&gt;(), <a class="code" href="../../d9/d4b/a00117.htm#a54f4c3c420a32e12992092a537c57ca0">c_agentbeliefseparator</a> ).createMask( p_name );</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    @Override</div>
<div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a1eea4b1ccefacd24a4a90ac0bac689cd">  214</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d4b/a00117.htm#a1eea4b1ccefacd24a4a90ac0bac689cd">init</a>( <span class="keyword">final</span> Agent ag, <span class="keyword">final</span> String[] args )</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    @Override</div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#af458afa6e5bf3c7c8787a109d3a8bedb">  220</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d4b/a00117.htm#af458afa6e5bf3c7c8787a109d3a8bedb">stop</a>()</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    @Override</div>
<div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a046688bc94b2a750af44c27b3d5f8b85">  226</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d4b/a00117.htm#a046688bc94b2a750af44c27b3d5f8b85">clear</a>()</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        m_mask.clear();</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    @Override</div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#ad08b2a1b96234139e900799de83781af">  232</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">boolean</span> <a class="code" href="../../d9/d4b/a00117.htm#ad08b2a1b96234139e900799de83781af">add</a>( <span class="keyword">final</span> Literal p_literal )</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">return</span> this.add( 0, p_literal );</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    @Override</div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a86ee5e38966ed56493fed2ed6394fbbf">  238</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">boolean</span> <a class="code" href="../../d9/d4b/a00117.htm#a86ee5e38966ed56493fed2ed6394fbbf">add</a>( <span class="keyword">final</span> <span class="keywordtype">int</span> p_index, <span class="keyword">final</span> Literal p_literal )</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keyword">final</span> Pair&lt;CPath, CLiteral&gt; l_pathliteral = this.createPathLiteral( p_literal );</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        m_mask.add( l_pathliteral.getLeft(), l_pathliteral.getRight() );</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    @Override</div>
<div class="line"><a name="l00246"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a866b34ed59b94e3a74e1da995c528590">  246</a></span>&#160;    <span class="keyword">public</span> Iterator&lt;Literal&gt; <a class="code" href="../../d9/d4b/a00117.htm#a866b34ed59b94e3a74e1da995c528590">iterator</a>()</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">return</span> this.getLiteralIterator( m_mask.iteratorLiteral() );</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    @Override</div>
<div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a74f83a8430d33976037b6357e1c3f29f">  252</a></span>&#160;    <span class="keyword">public</span> Iterator&lt;Literal&gt; <a class="code" href="../../d9/d4b/a00117.htm#a74f83a8430d33976037b6357e1c3f29f">getAll</a>()</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="comment">// deprecated</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">return</span> this.iterator();</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    @Override</div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a377219080551727068156d1b5e51356b">  259</a></span>&#160;    <span class="keyword">public</span> Iterator&lt;Literal&gt; <a class="code" href="../../d9/d4b/a00117.htm#a377219080551727068156d1b5e51356b">getCandidateBeliefs</a>( <span class="keyword">final</span> PredicateIndicator p_predict )</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keyword">final</span> Set&lt;ILiteral&lt;Literal&gt;&gt; l_literals = m_mask.getLiteral( this.splitLiteralPath( p_predict.getFunctor() ) );</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordflow">return</span> ( ( l_literals == null ) || ( l_literals.isEmpty() ) ) ? null : this.<a class="code" href="../../d9/d4b/a00117.htm#a233daad5f5789ecf17bf6b5bc6ffdafe">getLiteralIterator</a>( l_literals.iterator() );</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    }</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    @Override</div>
<div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#ac6ba1219d3f8fc96ecc83effe645d9ba">  267</a></span>&#160;    <span class="keyword">public</span> Iterator&lt;Literal&gt; <a class="code" href="../../d9/d4b/a00117.htm#ac6ba1219d3f8fc96ecc83effe645d9ba">getCandidateBeliefs</a>( <span class="keyword">final</span> Literal p_literal, <span class="keyword">final</span> Unifier p_unify )</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    {</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keyword">final</span> Set&lt;ILiteral&lt;Literal&gt;&gt; l_literals = m_mask.getLiteral( this.splitLiteralPath( p_literal.getFunctor() ) );</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">return</span> ( ( l_literals == null ) || ( l_literals.isEmpty() ) ) ? null : this.<a class="code" href="../../d9/d4b/a00117.htm#a233daad5f5789ecf17bf6b5bc6ffdafe">getLiteralIterator</a>( l_literals.iterator() );</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    @Override</div>
<div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a6576429c49fb9f079ddcd30faaf98cc9">  274</a></span>&#160;    <span class="keyword">public</span> Iterator&lt;Literal&gt; <a class="code" href="../../d9/d4b/a00117.htm#a6576429c49fb9f079ddcd30faaf98cc9">getRelevant</a>( <span class="keyword">final</span> Literal p_literal )</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="comment">// deprecated</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">return</span> this.getCandidateBeliefs( p_literal, null );</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    @Override</div>
<div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a93e3ea0233272cd610de0b934dd7639a">  281</a></span>&#160;    <span class="keyword">public</span> Literal <a class="code" href="../../d9/d4b/a00117.htm#a93e3ea0233272cd610de0b934dd7639a">contains</a>( <span class="keyword">final</span> Literal p_literal )</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keyword">final</span> Pair&lt;CPath, CLiteral&gt; l_pathliteral = this.createPathLiteral( p_literal );</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="comment">// Jason does not implement contains correct, so contains returns the literals if it is found or null if it is not found</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">if</span> ( <a class="code" href="../../d9/d4b/a00117.htm#ae329bec90be424e82a50fc8beb3340c9">m_mask</a>.containsLiteral( l_pathliteral.getLeft().append( l_pathliteral.getRight().getFunctor().get() ) ) )</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keywordflow">return</span> p_literal;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keywordflow">return</span> null;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    @Override</div>
<div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a9b53d392706d32004ac73905bb910214">  292</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">int</span> <a class="code" href="../../d9/d4b/a00117.htm#a9b53d392706d32004ac73905bb910214">size</a>()</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">return</span> m_mask.sizeLiteral();</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    @Override</div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a6faa86f568386e5bd420d16646c0fc44">  298</a></span>&#160;    <span class="keyword">public</span> Iterator&lt;Literal&gt; <a class="code" href="../../d9/d4b/a00117.htm#a6faa86f568386e5bd420d16646c0fc44">getPercepts</a>()</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    {</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">return</span> this.iterator();</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    @Override</div>
<div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a45bdda900ec2d08aeb95e8d940b8e183">  304</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">boolean</span> <span class="keyword">remove</span>( <span class="keyword">final</span> Literal p_literal )</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keyword">final</span> Pair&lt;CPath, CLiteral&gt; l_pathliteral = this.createPathLiteral( p_literal );</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">return</span> m_mask.remove( l_pathliteral.getLeft(), l_pathliteral.getValue() );</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    @Override</div>
<div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a8efe4b3605dbd2944c805bf91cda04b7">  311</a></span>&#160;    <span class="keyword">public</span> <span class="keywordtype">boolean</span> <a class="code" href="../../d9/d4b/a00117.htm#a8efe4b3605dbd2944c805bf91cda04b7">abolish</a>( <span class="keyword">final</span> PredicateIndicator p_predict )</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordflow">return</span> m_mask.remove( this.splitLiteralPath( p_predict.getFunctor() ) );</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    @Override</div>
<div class="line"><a name="l00317"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a831efaa447c82d8ce9a92f1291a0d010">  317</a></span>&#160;    <span class="keyword">public</span> Element <a class="code" href="../../d9/d4b/a00117.htm#a831efaa447c82d8ce9a92f1291a0d010">getAsDOM</a>( <span class="keyword">final</span> Document p_document )</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    {</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keyword">final</span> Element l_beliefs = p_document.createElement( <span class="stringliteral">&quot;beliefs&quot;</span> );</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">final</span> Literal l_item : <span class="keyword">this</span> )</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            l_beliefs.appendChild( l_item.getAsDOM( p_document ) );</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keywordflow">return</span> l_beliefs;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">     * @todo define a full deep-copy</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    @Override</div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a116c3a57da75fca189709ced23a7611a">  330</a></span>&#160;    <span class="keyword">public</span> BeliefBase <a class="code" href="../../d9/d4b/a00117.htm#a116c3a57da75fca189709ced23a7611a">clone</a>()</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    {</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">this</span>;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">     * creates a generic literal with path</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">     * @param p_literal input literal</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">     * @return pair of literal path and generic literal</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00341"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a12f2a4939a1b27e5bc7828e66de23e4a">  341</a></span>&#160;    <span class="keyword">private</span> Pair&lt;CPath, CLiteral&gt; <a class="code" href="../../d9/d4b/a00117.htm#a12f2a4939a1b27e5bc7828e66de23e4a">createPathLiteral</a>( <span class="keyword">final</span> Literal p_literal )</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../dc/d54/a00094.htm">CPath</a> l_path = this.splitLiteralPath( p_literal.getFunctor() );</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="comment">// build literal</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keyword">final</span> Literal l_literal = ASSyntax.createLiteral( !p_literal.negated(), l_path.<a class="code" href="../../dc/d54/a00094.htm#a126a8674038ce8036263f7c317a4830d">getSuffix</a>() );</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        l_literal.addAnnot( p_literal.getAnnots() );</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        l_literal.addTerms( p_literal.getTerms() );</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="comment">// create pair of path and literal</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">new</span> ImmutablePair&lt;&gt;( l_path.getSubPath( 0, -1 ), <span class="keyword">new</span> <a class="code" href="../../da/d24/a00068.htm">CLiteral</a>( l_literal ) );</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">     * splits the literal path</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">     * @param p_functor input literal functor</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">     * @return path</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00360"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a66efae3ef0fd18ac177e302f1e0dfb60">  360</a></span>&#160;    <span class="keyword">private</span> <a class="code" href="../../dc/d54/a00094.htm">CPath</a> <a class="code" href="../../d9/d4b/a00117.htm#a66efae3ef0fd18ac177e302f1e0dfb60">splitLiteralPath</a>( <span class="keyword">final</span> String p_functor )</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="comment">// split path from functor and remove if exists the root name</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../dc/d54/a00094.htm">CPath</a> l_path = CPath.createSplitPath( <a class="code" href="../../d9/d4b/a00117.htm#a54f4c3c420a32e12992092a537c57ca0">c_agentbeliefseparator</a>, p_functor );</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">if</span> ( l_path.<a class="code" href="../../dc/d54/a00094.htm#acd573437f8aba9e5a1a92a0723a09f3f">startsWith</a>( <a class="code" href="../../d9/d4b/a00117.htm#ac01585d4e757b4388c97d69c43367c56">c_beliefbaseroot</a> ) )</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            l_path.<a class="code" href="../../dc/d54/a00094.htm#ab6eb1665074e9365b8972c89d78aa546">remove</a>( 0, <a class="code" href="../../d9/d4b/a00117.htm#ac01585d4e757b4388c97d69c43367c56">c_beliefbaseroot</a>.<a class="code" href="../../dc/d54/a00094.htm#a0b3aaaf4c6a7a0db70c11bc25ce949a4">size</a>() );</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">return</span> l_path;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">     * get literal iterator</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">     * @return iterator</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00376"></a><span class="lineno"><a class="line" href="../../d9/d4b/a00117.htm#a233daad5f5789ecf17bf6b5bc6ffdafe">  376</a></span>&#160;    <span class="keyword">private</span> Iterator&lt;Literal&gt; <a class="code" href="../../d9/d4b/a00117.htm#a233daad5f5789ecf17bf6b5bc6ffdafe">getLiteralIterator</a>( <span class="keyword">final</span> Iterator&lt;ILiteral&lt;Literal&gt;&gt; p_iterator )</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    {</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">new</span> Iterator&lt;Literal&gt;()</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        {</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            @Override</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            <span class="keyword">public</span> <span class="keywordtype">boolean</span> hasNext()</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            {</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                <span class="keywordflow">return</span> p_iterator.hasNext();</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            }</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            @Override</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keyword">public</span> Literal next()</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                <span class="comment">// literal with path</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                <span class="keywordflow">return</span> p_iterator.next().getLiteral();</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            }</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        };</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    }</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;}</div>
<div class="ttc" id="a00068_htm"><div class="ttname"><a href="../../da/d24/a00068.htm">de.tu_clausthal.in.mec.object.mas.jason.belief.CLiteral</a></div><div class="ttdoc">class for literals </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d3e/a00253_source.htm#l00038">jason/belief/CLiteral.java:38</a></div></div>
<div class="ttc" id="a00117_htm_a233daad5f5789ecf17bf6b5bc6ffdafe"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a233daad5f5789ecf17bf6b5bc6ffdafe">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.getLiteralIterator</a></div><div class="ttdeci">Iterator&lt; Literal &gt; getLiteralIterator(final Iterator&lt; ILiteral&lt; Literal &gt;&gt; p_iterator)</div><div class="ttdoc">get literal iterator </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00376">CTreeBeliefBase.java:376</a></div></div>
<div class="ttc" id="a00117_htm_ac6ba1219d3f8fc96ecc83effe645d9ba"><div class="ttname"><a href="../../d9/d4b/a00117.htm#ac6ba1219d3f8fc96ecc83effe645d9ba">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.getCandidateBeliefs</a></div><div class="ttdeci">Iterator&lt; Literal &gt; getCandidateBeliefs(final Literal p_literal, final Unifier p_unify)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00267">CTreeBeliefBase.java:267</a></div></div>
<div class="ttc" id="a00117_htm"><div class="ttname"><a href="../../d9/d4b/a00117.htm">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase</a></div><div class="ttdoc">beliefbase which wraps all Jason structures </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00051">CTreeBeliefBase.java:51</a></div></div>
<div class="ttc" id="a00117_htm_a377219080551727068156d1b5e51356b"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a377219080551727068156d1b5e51356b">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.getCandidateBeliefs</a></div><div class="ttdeci">Iterator&lt; Literal &gt; getCandidateBeliefs(final PredicateIndicator p_predict)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00259">CTreeBeliefBase.java:259</a></div></div>
<div class="ttc" id="a00117_htm_ae329bec90be424e82a50fc8beb3340c9"><div class="ttname"><a href="../../d9/d4b/a00117.htm#ae329bec90be424e82a50fc8beb3340c9">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.m_mask</a></div><div class="ttdeci">final CMask m_mask</div><div class="ttdoc">root beliefbase </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00077">CTreeBeliefBase.java:77</a></div></div>
<div class="ttc" id="a00117_htm_a360d69bcb23f1b4df2480f8f5ac00bc0"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a360d69bcb23f1b4df2480f8f5ac00bc0">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.update</a></div><div class="ttdeci">void update()</div><div class="ttdoc">updates all internal data structures, should be called on the agent cycle </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00184">CTreeBeliefBase.java:184</a></div></div>
<div class="ttc" id="a00117_htm_a93e3ea0233272cd610de0b934dd7639a"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a93e3ea0233272cd610de0b934dd7639a">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.contains</a></div><div class="ttdeci">Literal contains(final Literal p_literal)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00281">CTreeBeliefBase.java:281</a></div></div>
<div class="ttc" id="a00117_htm_a4450978b3248ecdaa8eed36113057397"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a4450978b3248ecdaa8eed36113057397">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.createBeliefbase</a></div><div class="ttdeci">IBeliefBaseMask&lt; Literal &gt; createBeliefbase(final String p_name)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00208">CTreeBeliefBase.java:208</a></div></div>
<div class="ttc" id="a00117_htm_a74f83a8430d33976037b6357e1c3f29f"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a74f83a8430d33976037b6357e1c3f29f">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.getAll</a></div><div class="ttdeci">Iterator&lt; Literal &gt; getAll()</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00252">CTreeBeliefBase.java:252</a></div></div>
<div class="ttc" id="a00077_htm"><div class="ttname"><a href="../../d1/d09/a00077.htm">de.tu_clausthal.in.mec.object.mas.jason.belief.CMask</a></div><div class="ttdoc">beliefbase mask that represent the Jason beliefbase </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dd7/a00260_source.htm#l00036">jason/belief/CMask.java:36</a></div></div>
<div class="ttc" id="a00117_htm_a94431e1c6ea0361eada19cba02655f91"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a94431e1c6ea0361eada19cba02655f91">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.setMessageBeliefbase</a></div><div class="ttdeci">void setMessageBeliefbase(final Agent p_agent, final String p_agentnameseparator)</div><div class="ttdoc">set agent to the beliefbase for message system, can be set once </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00102">CTreeBeliefBase.java:102</a></div></div>
<div class="ttc" id="a00117_htm_a6faa86f568386e5bd420d16646c0fc44"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a6faa86f568386e5bd420d16646c0fc44">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.getPercepts</a></div><div class="ttdeci">Iterator&lt; Literal &gt; getPercepts()</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00298">CTreeBeliefBase.java:298</a></div></div>
<div class="ttc" id="a00117_htm_ac5062d04f88be8b538bd74edd5daff2b"><div class="ttname"><a href="../../d9/d4b/a00117.htm#ac5062d04f88be8b538bd74edd5daff2b">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.setMessages</a></div><div class="ttdeci">void setMessages(final Set&lt; IMessage &gt; p_messages)</div><div class="ttdoc">sets the messages to the message-beliefbase </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00171">CTreeBeliefBase.java:171</a></div></div>
<div class="ttc" id="a00117_htm_ad08b2a1b96234139e900799de83781af"><div class="ttname"><a href="../../d9/d4b/a00117.htm#ad08b2a1b96234139e900799de83781af">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.add</a></div><div class="ttdeci">boolean add(final Literal p_literal)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00232">CTreeBeliefBase.java:232</a></div></div>
<div class="ttc" id="a00117_htm_a16209a37d316ddc5ab5612b9c3eb82c4"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a16209a37d316ddc5ab5612b9c3eb82c4">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.unbind</a></div><div class="ttdeci">void unbind(final String p_bindname)</div><div class="ttdoc">unbind an object from the binding-beliefbase </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00131">CTreeBeliefBase.java:131</a></div></div>
<div class="ttc" id="a00117_htm_ac01585d4e757b4388c97d69c43367c56"><div class="ttname"><a href="../../d9/d4b/a00117.htm#ac01585d4e757b4388c97d69c43367c56">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.c_beliefbaseroot</a></div><div class="ttdeci">static final CPath c_beliefbaseroot</div><div class="ttdoc">name of the root beliefbase and its mask </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00065">CTreeBeliefBase.java:65</a></div></div>
<div class="ttc" id="a00117_htm_a6576429c49fb9f079ddcd30faaf98cc9"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a6576429c49fb9f079ddcd30faaf98cc9">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.getRelevant</a></div><div class="ttdeci">Iterator&lt; Literal &gt; getRelevant(final Literal p_literal)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00274">CTreeBeliefBase.java:274</a></div></div>
<div class="ttc" id="a00117_htm_a29e736930814144ee57fab36ace3361d"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a29e736930814144ee57fab36ace3361d">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.c_beliefbindprefixreplace</a></div><div class="ttdeci">static final String c_beliefbindprefixreplace</div><div class="ttdoc">binding replacing prefix - the prefix will be removed from the binding belief name ...</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00061">CTreeBeliefBase.java:61</a></div></div>
<div class="ttc" id="a00094_htm_a126a8674038ce8036263f7c317a4830d"><div class="ttname"><a href="../../dc/d54/a00094.htm#a126a8674038ce8036263f7c317a4830d">de.tu_clausthal.in.mec.common.CPath.getSuffix</a></div><div class="ttdeci">final String getSuffix()</div><div class="ttdoc">returns the last part of the path </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d56/a00274_source.htm#l00327">CPath.java:327</a></div></div>
<div class="ttc" id="a00020_htm"><div class="ttname"><a href="../../db/db2/a00020.htm">de.tu_clausthal.in.mec.object.mas.jason.belief.CBindingStorage</a></div><div class="ttdoc">beliefbase structure to bind object properties </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d24/a00222_source.htm#l00046">CBindingStorage.java:46</a></div></div>
<div class="ttc" id="a00117_htm_a12f2a4939a1b27e5bc7828e66de23e4a"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a12f2a4939a1b27e5bc7828e66de23e4a">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.createPathLiteral</a></div><div class="ttdeci">Pair&lt; CPath, CLiteral &gt; createPathLiteral(final Literal p_literal)</div><div class="ttdoc">creates a generic literal with path </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00341">CTreeBeliefBase.java:341</a></div></div>
<div class="ttc" id="a00117_htm_a046688bc94b2a750af44c27b3d5f8b85"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a046688bc94b2a750af44c27b3d5f8b85">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.clear</a></div><div class="ttdeci">void clear()</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00226">CTreeBeliefBase.java:226</a></div></div>
<div class="ttc" id="a00117_htm_a8efe4b3605dbd2944c805bf91cda04b7"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a8efe4b3605dbd2944c805bf91cda04b7">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.abolish</a></div><div class="ttdeci">boolean abolish(final PredicateIndicator p_predict)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00311">CTreeBeliefBase.java:311</a></div></div>
<div class="ttc" id="a00094_htm_acd573437f8aba9e5a1a92a0723a09f3f"><div class="ttname"><a href="../../dc/d54/a00094.htm#acd573437f8aba9e5a1a92a0723a09f3f">de.tu_clausthal.in.mec.common.CPath.startsWith</a></div><div class="ttdeci">final boolean startsWith(final CPath p_path)</div><div class="ttdoc">check of a path starts with another path </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d56/a00274_source.htm#l00479">CPath.java:479</a></div></div>
<div class="ttc" id="a00081_htm"><div class="ttname"><a href="../../d8/d53/a00081.htm">de.tu_clausthal.in.mec.object.mas.jason.belief.CMessageStorage</a></div><div class="ttdoc">beliefbase structure for message beliefs </div><div class="ttdef"><b>Definition:</b> <a href="../../df/da9/a00263_source.htm#l00050">CMessageStorage.java:50</a></div></div>
<div class="ttc" id="a00117_htm_a9b53d392706d32004ac73905bb910214"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a9b53d392706d32004ac73905bb910214">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.size</a></div><div class="ttdeci">int size()</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00292">CTreeBeliefBase.java:292</a></div></div>
<div class="ttc" id="a00094_htm"><div class="ttname"><a href="../../dc/d54/a00094.htm">de.tu_clausthal.in.mec.common.CPath</a></div><div class="ttdoc">class to create a path structure </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d56/a00274_source.htm#l00044">CPath.java:44</a></div></div>
<div class="ttc" id="a00117_htm_afdd95706f36ace1c51cf7d9f9cb8c5e0"><div class="ttname"><a href="../../d9/d4b/a00117.htm#afdd95706f36ace1c51cf7d9f9cb8c5e0">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.CTreeBeliefBase</a></div><div class="ttdeci">CTreeBeliefBase()</div><div class="ttdoc">ctor </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00083">CTreeBeliefBase.java:83</a></div></div>
<div class="ttc" id="a00117_htm_a54f4c3c420a32e12992092a537c57ca0"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a54f4c3c420a32e12992092a537c57ca0">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.c_agentbeliefseparator</a></div><div class="ttdeci">static final String c_agentbeliefseparator</div><div class="ttdoc">path separator of agent belief </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00057">CTreeBeliefBase.java:57</a></div></div>
<div class="ttc" id="a00012_htm"><div class="ttname"><a href="../../df/d86/a00012.htm">de.tu_clausthal.in.mec.object.mas.jason.belief.CBeliefBase</a></div><div class="ttdoc">Jason specfic beliefbase. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/dd5/a00215_source.htm#l00036">jason/belief/CBeliefBase.java:36</a></div></div>
<div class="ttc" id="a00117_htm_a116c3a57da75fca189709ced23a7611a"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a116c3a57da75fca189709ced23a7611a">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.clone</a></div><div class="ttdeci">BeliefBase clone()</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00330">CTreeBeliefBase.java:330</a></div></div>
<div class="ttc" id="a00117_htm_a713d5212c41768a70fac38dc6762ae1a"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a713d5212c41768a70fac38dc6762ae1a">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.c_beliefbasemessage</a></div><div class="ttdeci">static final CPath c_beliefbasemessage</div><div class="ttdoc">name of the message beliefbase and its mask </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00073">CTreeBeliefBase.java:73</a></div></div>
<div class="ttc" id="a00117_htm_a9eb658d5378fcd71dabe8d0459be93c9"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a9eb658d5378fcd71dabe8d0459be93c9">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.generateTreeStructure</a></div><div class="ttdeci">void generateTreeStructure(final Literal p_literal, final boolean p_addliteral)</div><div class="ttdoc">adds a literal and its belief structure to the agent beliefbase </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00196">CTreeBeliefBase.java:196</a></div></div>
<div class="ttc" id="a00117_htm_a866b34ed59b94e3a74e1da995c528590"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a866b34ed59b94e3a74e1da995c528590">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.iterator</a></div><div class="ttdeci">Iterator&lt; Literal &gt; iterator()</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00246">CTreeBeliefBase.java:246</a></div></div>
<div class="ttc" id="a00117_htm_a86ee5e38966ed56493fed2ed6394fbbf"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a86ee5e38966ed56493fed2ed6394fbbf">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.add</a></div><div class="ttdeci">boolean add(final int p_index, final Literal p_literal)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00238">CTreeBeliefBase.java:238</a></div></div>
<div class="ttc" id="a00117_htm_a5b367d9bd299fd23dfa2f6997ea2dc12"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a5b367d9bd299fd23dfa2f6997ea2dc12">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.getRootMask</a></div><div class="ttdeci">IBeliefBaseMask&lt; Literal &gt; getRootMask()</div><div class="ttdoc">returns the root mask </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00141">CTreeBeliefBase.java:141</a></div></div>
<div class="ttc" id="a00117_htm_afb4fffe321b7d68fc3b0e2c56626fa59"><div class="ttname"><a href="../../d9/d4b/a00117.htm#afb4fffe321b7d68fc3b0e2c56626fa59">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.add</a></div><div class="ttdeci">void add(final CPath p_path, final IBeliefBaseMask&lt; Literal &gt; p_mask)</div><div class="ttdoc">adds a mask to the beliefbase </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00160">CTreeBeliefBase.java:160</a></div></div>
<div class="ttc" id="a00117_htm_a27a53edc64e41ce0a3ebb63ac3a5274c"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a27a53edc64e41ce0a3ebb63ac3a5274c">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.c_beliefbasebind</a></div><div class="ttdeci">static final CPath c_beliefbasebind</div><div class="ttdoc">name of the binding beliefbase and its mask </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00069">CTreeBeliefBase.java:69</a></div></div>
<div class="ttc" id="a00117_htm_a932df8358fa426d589515b56d8286f2a"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a932df8358fa426d589515b56d8286f2a">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.bind</a></div><div class="ttdeci">void bind(final String p_bindname, final Object p_bind)</div><div class="ttdoc">bind an object to the binding-beliefbase </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00121">CTreeBeliefBase.java:121</a></div></div>
<div class="ttc" id="a00117_htm_af458afa6e5bf3c7c8787a109d3a8bedb"><div class="ttname"><a href="../../d9/d4b/a00117.htm#af458afa6e5bf3c7c8787a109d3a8bedb">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.stop</a></div><div class="ttdeci">void stop()</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00220">CTreeBeliefBase.java:220</a></div></div>
<div class="ttc" id="a00094_htm_a0b3aaaf4c6a7a0db70c11bc25ce949a4"><div class="ttname"><a href="../../dc/d54/a00094.htm#a0b3aaaf4c6a7a0db70c11bc25ce949a4">de.tu_clausthal.in.mec.common.CPath.size</a></div><div class="ttdeci">final int size()</div><div class="ttdoc">returns the number of path elements </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d56/a00274_source.htm#l00468">CPath.java:468</a></div></div>
<div class="ttc" id="a00117_htm_a66efae3ef0fd18ac177e302f1e0dfb60"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a66efae3ef0fd18ac177e302f1e0dfb60">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.splitLiteralPath</a></div><div class="ttdeci">CPath splitLiteralPath(final String p_functor)</div><div class="ttdoc">splits the literal path </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00360">CTreeBeliefBase.java:360</a></div></div>
<div class="ttc" id="a00094_htm_ab6eb1665074e9365b8972c89d78aa546"><div class="ttname"><a href="../../dc/d54/a00094.htm#ab6eb1665074e9365b8972c89d78aa546">de.tu_clausthal.in.mec.common.CPath.remove</a></div><div class="ttdeci">final CPath remove(final int p_index)</div><div class="ttdoc">removes an element </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d56/a00274_source.htm#l00180">CPath.java:180</a></div></div>
<div class="ttc" id="a00117_htm_a831efaa447c82d8ce9a92f1291a0d010"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a831efaa447c82d8ce9a92f1291a0d010">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.getAsDOM</a></div><div class="ttdeci">Element getAsDOM(final Document p_document)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00317">CTreeBeliefBase.java:317</a></div></div>
<div class="ttc" id="a00117_htm_a1eea4b1ccefacd24a4a90ac0bac689cd"><div class="ttname"><a href="../../d9/d4b/a00117.htm#a1eea4b1ccefacd24a4a90ac0bac689cd">de.tu_clausthal.in.mec.object.mas.jason.belief.CTreeBeliefBase.init</a></div><div class="ttdeci">void init(final Agent ag, final String[] args)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d82/a00293_source.htm#l00214">CTreeBeliefBase.java:214</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div id = "nav-path" class = "navpath" >
    <ul >
        <li >
            <a href = "https://github.com/flashpixx/MecSim" >MecSim - Traffic Simulation</a ></li >
    </ul >
</div >
